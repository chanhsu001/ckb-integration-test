# NOTE: This file is generated by `./scripts/render_main_tf.sh`.
#       Please Read `./scripts/render_main_tf.sh` for more information.

provider "aws" {
    region = "ap-southeast-1"
    alias  = "ap-southeast-1"
    access_key = "${var.access_key}"
    secret_key = "${var.secret_key}"
}

resource "aws_vpc" "vpc-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  cidr_block           = "172.31.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "${var.prefix}-vpc"
  }
}

resource "aws_subnet" "subnet-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  vpc_id                  = aws_vpc.vpc-ap-southeast-1.id
  cidr_block           = "172.31.0.0/16"
  map_public_ip_on_launch = true
  tags = {
    Name = "${var.prefix}-subnet"
  }
}

resource "aws_internet_gateway" "ig-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  vpc_id                  = aws_vpc.vpc-ap-southeast-1.id
  tags = {
    Name = "${var.prefix}"
  }
}

resource "aws_route_table" "rt-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  vpc_id                  = aws_vpc.vpc-ap-southeast-1.id
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.ig-ap-southeast-1.id}"
    }
  tags = {
    Name = "${var.prefix}"
  }
}

resource "aws_route_table_association" "subnet-association-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  subnet_id      = "${aws_subnet.subnet-ap-southeast-1.id}"
  route_table_id = "${aws_route_table.rt-ap-southeast-1.id}"
}

data "aws_ami" "ubuntu-ap-southeast-1" {
  provider = aws.ap-southeast-1
  most_recent = true
  owners      = ["099720109477"] # Canonical
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }
}

resource "aws_key_pair" "key-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  key_name   = "${var.prefix}"
  public_key = file(var.public_key_path)
}

resource "aws_security_group" "sg-ap-southeast-1" {
  provider      = aws.ap-southeast-1
  name   = "${var.prefix}-sg"
  vpc_id = aws_vpc.vpc-ap-southeast-1.id

  ingress {
    description = "ssh"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "all inbound from anywhere"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "all outbound to anywhere"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.prefix}"
  }
}

resource "aws_instance" "instance-ap-southeast-1" {
  provider = aws.ap-southeast-1
  ami           = data.aws_ami.ubuntu-ap-southeast-1.id
  key_name      = aws_key_pair.key-ap-southeast-1.id
  instance_type = "${var.instance_type}"
  vpc_security_group_ids = [aws_security_group.sg-ap-southeast-1.id]
  subnet_id              = aws_subnet.subnet-ap-southeast-1.id
  root_block_device {
    volume_size = "60"
  }
  tags = {
    Name  = "${var.prefix}"
  }

  provisioner "remote-exec" {
    inline = [
      "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done",
    ]

    connection {
        type        = "ssh"
        host        = aws_instance.instance-ap-southeast-1.public_ip
        user        = var.username
        private_key = file(var.private_key_path)
    }
  }
}

output "ansible-hosts-ap-southeast-1" {
  value = <<EOF

ap-southeast-1:
  hosts:
    instance-ap-southeast-1:
      ansible_host: ${aws_instance.instance-ap-southeast-1.public_ip}
      instance_type: ${aws_instance.instance-ap-southeast-1.instance_type}
      region: ap-southeast-1
      prefix: ${var.prefix}
      ansible_user: ${var.username}
EOF
}
